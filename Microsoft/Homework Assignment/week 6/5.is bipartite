//using bfs

class Solution {
    public boolean isBipartite(int[][] graph) {
        int n=graph.length;
        int[] color=new int[n];
        Arrays.fill(color,-1);
        for(int i=0;i<n;i++){
            if(color[i]==-1){
                if(!bfs(graph,color,i)){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean bfs(int[][] graph,int[] color,int k){
        Queue<Integer> q=new LinkedList<>();
        q.add(k);
        color[k]=1;
        while(!q.isEmpty()){
            int s=q.poll();
            for(int i=0;i<graph[s].length;i++){
                int n=graph[s][i];
                if(color[n]==-1){
                    q.add(n);
                    color[n]=1-color[s];
                }else{
                    if(color[n]==color[s]){
                        return false;
                    }
                }
            }
        }
        return true;
    }
}

*****************************************************************************************************************************************************************

// using dfs


class Solution {
    public boolean isBipartite(int[][] graph) {
        int n=graph.length;
        int[] color=new int[n];
        Arrays.fill(color,-1);
        for(int i=0;i<n;i++){
            if(color[i]==-1){
                if(!dfs(graph,color,i)){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean dfs(int[][] graph,int[] color,int i){
        if(color[i]==-1)
        color[i]=1;
        for(int node:graph[i]){
            if(color[node]==-1){
                color[node]=1-color[i];
                if(!dfs(graph,color,node)){
                    return false;
                }
            }
            else{
                    if(color[i]==color[node]){
                        return false;
                    }
                }
        }
        return true;
    }
}
